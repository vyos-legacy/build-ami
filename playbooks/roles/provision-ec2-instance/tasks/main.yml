---
- name: install boto3 prerequisites
  pip:
    state: present
    name:
     - boto3
     - boto
  become: yes
  tags:
    - prerequisites

# tasks file for provision-ec2-instance
- name: Make sure that files/ssh-keys directory exists
  file:
    path: "{{ temp_folder }}"
    state: directory
  tags:
    - aws
    - AWS

- name: Create an SSH key pair
  ec2_key:
    name: "{{ key_pair_name }}"
    region: "{{ ec2_region }}"
    wait: True
  register: key_pair
  tags:
    - aws
    - AWS

- name: Dump key pair
  copy:
    content: "{{ key_pair.key.private_key }}"
    dest: "{{ key_pair_file }}"
    mode: 0600
  when: key_pair.changed | bool
  tags:
    - aws
    - AWS

- name: Looking  for {{ key_pair_file }}
  stat:
    path: "{{ key_pair_file }}"
  register: st_ssh_key
  when: not (key_pair.changed | bool)
  tags:
    - aws
    - AWS

- name: Assert that SSH private key is persent if ec2 key already exists
  assert:
    that: st_ssh_key.stat.exists
  when: not (key_pair.changed | bool)
  tags:
    - aws
    - AWS

- name: Find the default VPC
  ec2_vpc_net_info:
    region: "{{ ec2_region }}"
    filters:
      isDefault: "true"
  register: vpc_nets
  tags:
    - aws
    - AWS

- name: Find the default VPC subnet
  ec2_vpc_subnet_info:
    region: "{{ ec2_region }}"
    filters:
      "vpc-id": "{{ vpc_nets.vpcs[0].vpc_id }}"
      defaultForAz: "true"
  register: vpc_subnets
  tags:
    - aws
    - AWS

- name: Create a security group that allows SSH
  ec2_group:
    name: "vyos_build_ami"
    state: present
    description: This security group was generated by ansible playbook vyos_build_ami.yml
    region: "{{ ec2_region }}"
    vpc_id: "{{ vpc_subnets.subnets[0].vpc_id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  register: security_group
  tags:
    - aws
    - AWS

#Look up the AMI id to use based on a search
- name: Look up Debian Jessie AMI
  ec2_ami_info:
    owners: "{{ base_image.debian_aws_account_id }}"
    region: "{{ ec2_region }}"
    filters:
      name: "{{ base_image.name }}"
      architecture: "{{ base_image.architecture }}"
      hypervisor: "{{ base_image.hypervisor }}"
      "root-device-type": "{{ base_image.root_device_type }}"
      state: available
  register: debian_ami
  tags:
    - aws
    - AWS

#---- Launch EC2 instance ----
- name: Launch an EC2 instance
  ec2:
    key_name: "{{ key_pair_name }}"
    assign_public_ip: True
    vpc_subnet_id: "{{ vpc_subnets.subnets[0].subnet_id }}"
    image: "{{ debian_ami.images[0].image_id }}"
    instance_type: "{{ instance_type }}"
    region: "{{ ec2_region }}"
    group_id: "{{ security_group.group_id  }}"
    wait: yes
    instance_tags:
      Name: "{{ placeholder }}"
      Type: "VyOS"
    volumes:
      - device_name: /dev/sdf
        volume_type: gp2
        volume_size: "{{ volume_size }}"
        delete_on_termination: True
  register: ec2_instance
  tags:
    - aws
    - AWS

- name: Add instance's public DNS name to ansible host group ec2
  add_host:
    name: "{{ ec2_instance.instances[0].public_ip }}"
    groups: ec2
    ansible_user: admin
    ansible_ssh_private_key_file: "{{ key_pair_file }}"
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
  tags:
    - aws
    - AWS

- name: Show EC2 instance public ip.
  debug: 
    msg: "{{ ec2_instance.instances[0].public_ip }}"
  tags:
    - aws
    - AWS

- name: Wait for instance's SSH port to open
  wait_for:
    host: "{{ ec2_instance.instances[0].public_ip }}"
    port: 22
    delay: 10
    timeout: 300
    state: started
  tags:
    - aws
    - AWS
